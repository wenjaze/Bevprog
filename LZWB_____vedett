// z3a7.cpp
//
// Együtt támadjuk meg: http://progpater.blog.hu/2011/04/14/egyutt_tamadjuk_meg
// LZW fa építő 3. C++ átirata a C valtozatbol (+mélység, atlag és szórás)
// Programozó Páternoszter
//
// Copyright (C) 2011, 2012, Bátfai Norbert, nbatfai@inf.unideb.hu, nbatfai@gmail.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Ez a program szabad szoftver; terjeszthetõ illetve módosítható a
// Free Software Foundation által kiadott GNU General Public License
// dokumentumában leírtak; akár a licenc 3-as, akár (tetszõleges) késõbbi
// változata szerint.
//
// Ez a program abban a reményben kerül közreadásra, hogy hasznos lesz,
// de minden egyéb GARANCIA NÉLKÜL, az ELADHATÓSÁGRA vagy VALAMELY CÉLRA
// VALÓ ALKALMAZHATÓSÁGRA való származtatott garanciát is beleértve.
// További részleteket a GNU General Public License tartalmaz.
//
// A felhasználónak a programmal együtt meg kell kapnia a GNU General
// Public License egy példányát; ha mégsem kapta meg, akkor
// tekintse meg a <http://www.gnu.org/licenses/> oldalon.
//
//
// Version history:
//
// 0.0.1,       http://progpater.blog.hu/2011/02/19/gyonyor_a_tomor
// 0.0.2,       csomópontok mutatóinak NULLázása (nem fejtette meg senki :)
// 0.0.3,       http://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
// 0.0.4,       z.cpp: a C verzióból svn: bevezetes/C/ziv/z.c átírjuk C++-ra
//              http://progpater.blog.hu/2011/03/31/imadni_fogjatok_a_c_t_egy_emberkent_tiszta_szivbol
// 0.0.5,       z2.cpp: az fgv(*mut)-ok helyett fgv(&ref)
// 0.0.6,       z3.cpp: Csomopont beágyazva
//              http://progpater.blog.hu/2011/04/01/imadni_fogjak_a_c_t_egy_emberkent_tiszta_szivbol_2
// 0.0.6.1      z3a2.c: LZWBinFa már nem barátja a Csomopont-nak, mert annak tagjait nem használja direktben
// 0.0.6.2      Kis kommentezést teszünk bele 1. lépésként (hogy a kicsit lemaradt hallgatóknak is
//              könnyebb legyen, jól megtűzdeljük további olvasmányokkal)
//              http://progpater.blog.hu/2011/04/14/egyutt_tamadjuk_meg
//              (majd a 2. lépésben "beletesszük a d.c-t", majd s 3. lépésben a parancssorsor argok feldolgozását)
// 0.0.6.3      z3a2.c: Fejlesztgetjük a forrást: http://progpater.blog.hu/2011/04/17/a_tizedik_tizenegyedik_labor
// 0.0.6.4      SVN-beli, http://www.inf.unideb.hu/~nbatfai/p1/forrasok-SVN/bevezetes/vedes/
// 0.0.6.5      2012.03.20, z3a4.cpp: N betűk (hiányok), sorvégek, vezető komment figyelmen kívül: http://progpater.blog.hu/2012/03/20/a_vedes_elokeszitese
// 0.0.6.6      z3a5.cpp: mamenyaka kolléga észrevételére a több komment sor figyelmen kívül hagyása
//		http://progpater.blog.hu/2012/03/20/a_vedes_elokeszitese/fullcommentlist/1#c16150365
// 0.0.6.7	Javaslom ezt a verziót választani védendő programnak
// 0.0.6.8	z3a7.cpp: pár kisebb javítás, illetve a védések támogatásához további komment a <<
// 		eltoló operátort tagfüggvényként, illetve globális függvényként túlterhelő részekhez.
//		http://progpater.blog.hu/2012/04/10/imadni_fogjak_a_c_t_egy_emberkent_tiszta_szivbol_4/fullcommentlist/1#c16341099
//

#include <iostream>		// mert olvassuk a std::cin, írjuk a std::cout csatornákat
#include <cmath>		// mert vonunk gyököt a szóráshoz: std::sqrt
#include <fstream>		// fájlból olvasunk, írunk majd
#include <string>		


/* Az LZWBinFa osztályban absztraháljuk az LZW algoritmus bináris fa építését. Az osztály
 definíciójába beágyazzuk a fa egy csomópontjának az absztrakt jellemzését, ez lesz a
 beágyazott Csomopont osztály. Miért ágyazzuk be? Mert külön nem szánunk neki szerepet, ezzel
 is jelezzük, hogy csak a fa részeként számiolunk vele.*/


/* 



ÍGY HASZNÁLD : ./programneveamireforditottuk bemeneti_fajl_neve.txt -o kimeneti_fajl_neve.txt -i vagy -po vagy -pr (-s a statisztikáért).


*/



class LZWBinFa
{
public:
    
    

    LZWBinFa ():fa (&gyoker) // --- Konstruktor, annyit csinál, hogy amikor meghívódik, a fa gyökerére áll.
    {
    }
    ~LZWBinFa () // --- Destruktor, amikor meghívódik, felszabadítja az adott csomopont 0-s és 1-es gyermekeit.
    {
        szabadit (gyoker.egyesGyermek ());
        szabadit (gyoker.nullasGyermek ());
    }


    /* ------------------------
    Getter fügvények, itt arra szolgálnak, hogy visszaadják a binfába bekerülő (nulla,egy) és binfába nem bekerülő nullák és egyek (ossznulla,osszegy) számát.
    összegy,össznulla azért kell, hogy a végén statisztikát tudjunk vezetni, hány 0-t és 1-et vizsgáltunk és azokból hány került be a fába.(5ösért volt előző gyakon.)
    -------------------------- */

    double
    getNull()
    {
    	return nulla;
    }

    double
    getOsszNull()
    {
    	return ossznulla;
    }


    double
    getEgy()
    {
    	return egy;
    }

    double
    getOsszEgy()
    {
    	return osszegy;
    }


    // --- Tagfüggvényként túlterheljük az << operatort, így binFa << b vel nyomhatjuk az adott 0-t vagy 1-et a fába.

    void operator<< (char b)
    {
        // Mit kell betenni éppen, '0'-t?
        if (b == '0')
        {
        	// --- A vizsgált bit 0, tehát az ossznulla-t noveljuk.
        	++ossznulla;
            /* Van '0'-s gyermeke az aktuális csomópontnak?
           megkérdezzük Tőle, a "fa" mutató éppen reá mutat */
            if (!fa->nullasGyermek ())	// ha nincs, hát akkor csinálunk
            {

                // elkészítjük, azaz páldányosítunk a '0' betű akt. parammal
                Csomopont *uj = new Csomopont ('0');
                // az aktuális csomópontnak, ahol állunk azt üzenjük, hogy
                // jegyezze már be magának, hogy nullás gyereke mostantól van
                // küldjük is Neki a gyerek címét:
                fa->ujNullasGyermek (uj);
                // --- Itt egy új 0-t rakunk a fába tehát a nullák számát 1-et növeljük az összeszámoláshoz.
                nulla++;
                // és visszaállunk a gyökérre (mert ezt diktálja az alg.)
                fa = &gyoker;
            }
            else			// ha van, arra rálépünk
            {
                // azaz a "fa" pointer már majd a szóban forgó gyermekre mutat:
                fa = fa->nullasGyermek ();
            }
        }
        // Mit kell betenni éppen, vagy '1'-et?
        else
        {
        	// --- else, tehát a vizsgált bit nem 0, osszegyet növeljük 1-el.
        	++osszegy;
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                // --- Új 1-es kerül a fába növeljük az egyesek számát.
                egy++;
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }

    void kiiri (void)
    {
        melyseg = 0;
        kiiri (&gyoker, std::cout);
    }
    void kiirpr (void)
    {
    	melyseg = 0;
    	kiiri (&gyoker, std::cout);
    }
    void kiirpo (void)
    {
    	melyseg = 0;
    	kiiri (&gyoker, std::cout);
    }
 
    int getMelyseg (void);
    double getAtlag (void);
    double getSzoras (void);
    int egy = 0;
    int nulla = 0;
    int osszegy = 0;
    int ossznulla = 0;



    // --- Nem a legszebb megoldás de működik, 3 külön fv-t írunk és a "-i | -po | -pr"-től függően máshogy "járjuk" be a fát
    void kiiri (std::ostream & os)
    {
        melyseg = 0;
        kiiri (&gyoker, os);
    }
    void kiirpo (std::ostream & os)
    {
        melyseg = 0;
        kiirpo (&gyoker, os);
    }
    void kiirpr (std::ostream & os)
    {
        melyseg = 0;
        kiirpr (&gyoker, os);
    }

private:
    class Csomopont
    {
    public:
        /* A paraméter nélküli konstruktor az elepértelmezett '/' "gyökér-betűvel" hozza
       létre a csomópontot, ilyet hívunk a fából, aki tagként tartalmazza a gyökeret.
       Máskülönben, ha valami betűvel hívjuk, akkor azt teszi a "betu" tagba, a két
       gyermekre mutató mutatót pedig nullra állítjuk, C++-ban a 0 is megteszi. */
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
        {
        };
        ~Csomopont ()
        {
        };
        // Aktuális csomópont, mondd meg nékem, ki a bal oldali gyermeked
        // (a C verzió logikájával műxik ez is: ha nincs, akkor a null megy vissza)
        Csomopont *nullasGyermek () const
        {
            return balNulla;
        }
        // Aktuális csomópon,t mondd meg nékem, ki a jobb oldali gyermeked?
        Csomopont *egyesGyermek () const
        {
            return jobbEgy;
        }
        // Aktuális csomópont, ímhol legyen a "gy" mutatta csomópont a bal oldali gyereked!
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        // Aktuális csomópont, ímhol legyen a "gy" mutatta csomópont a jobb oldali gyereked!
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
        // Aktuális csomópont: Te milyen betűt hordozol?
        // (a const kulcsszóval jelezzük, hogy nem bántjuk a példányt)
        char getBetu () const
        {
            return betu;
        }

    private:
        // friend class LZWBinFa; /* mert ebben a valtozatban az LZWBinFa metódusai nem közvetlenül
        // a Csomopont tagjaival dolgoznak, hanem beállító/lekérdező üzenetekkel érik el azokat */

        // Milyen betűt hordoz a csomópont
        char betu;
        // Melyik másik csomópont a bal oldali gyermeke? (a C változatból "örökölt" logika:
        // ha hincs ilyen csermek, akkor balNulla == null) igaz
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        // nem másolható a csomópont (ökörszabály: ha van valamilye a szabad tárban,
        // letiltjuk a másoló konstruktort, meg a másoló értékadást)
        Csomopont (const Csomopont &); //másoló konstruktor
        Csomopont & operator= (const Csomopont &);
    };

    /* Mindig a fa "LZW algoritmus logikája szerinti aktuális" csomópontjára mutat */
    Csomopont *fa;
    // technikai
    int melyseg, atlagosszeg, atlagdb;
    double szorasosszeg;
    // szokásosan: nocopyable
    LZWBinFa (const LZWBinFa &);
    LZWBinFa & operator= (const LZWBinFa &);

    /* Kiírja a csomópontot az os csatornára. A rekurzió kapcsán lásd a korábbi K&R-es utalást... */
    void kiiri (Csomopont * elem, std::ostream & os) //INORDER
    {
        // Nem létező csomóponttal nem foglalkozunk... azaz ez a rekurzió leállítása
        if (elem != NULL)
        {
            ++melyseg;
            kiiri (elem->nullasGyermek (), os);//bal
            
            for (int i = 0; i < melyseg; ++i)
                os << "-";
            os << elem->getBetu () << "(" << melyseg << ")" << std::endl;//gyoker
            kiiri (elem->egyesGyermek (), os);//jobb
            --melyseg;
        }
    }

    void kiirpo (Csomopont * elem, std::ostream & os) //POSTORDER
    {
        // Nem létező csomóponttal nem foglalkozunk... azaz ez a rekurzió leállítása
        if (elem != NULL)
        {
            ++melyseg;
            kiirpo (elem->nullasGyermek (), os); //bal
            kiirpo (elem->egyesGyermek (), os); //jobb
            for (int i = 0; i < melyseg; ++i)
                os << "-";
            os << elem->getBetu () << "(" << melyseg << ")" << std::endl; //gyoker
            
            --melyseg;
        }
    }

    void kiirpr (Csomopont * elem, std::ostream & os) //PREORDER
    {
        // Nem létező csomóponttal nem foglalkozunk... azaz ez a rekurzió leállítása
        if (elem != NULL)
        {
            ++melyseg;
            

            for (int i = 0; i < melyseg; ++i)
                os << "-";
            os << elem->getBetu () << "(" << melyseg << ")" << std::endl; //gyoker

            kiirpr (elem->nullasGyermek (), os); //bal
            kiirpr (elem->egyesGyermek (), os); //jobb
            --melyseg;
        }
    }

    void szabadit (Csomopont * elem)
    {
        if (elem != NULL)
        {
            szabadit (elem->egyesGyermek ());
            szabadit (elem->nullasGyermek ());
            delete elem;
        }
    }

protected:	

    Csomopont gyoker;
    int maxMelyseg;
    double atlag, szoras;

    void rmelyseg (Csomopont * elem);
    void ratlag (Csomopont * elem);
    void rszoras (Csomopont * elem);

};


int
LZWBinFa::getMelyseg (void)
{
    melyseg = maxMelyseg = 0;
    rmelyseg (&gyoker);
    return maxMelyseg - 1;
}

double
LZWBinFa::getAtlag (void)
{
    melyseg = atlagosszeg = atlagdb = 0;
    ratlag (&gyoker);
    atlag = ((double) atlagosszeg) / atlagdb;
    return atlag;
}

double
LZWBinFa::getSzoras (void)
{
    atlag = getAtlag ();
    szorasosszeg = 0.0;
    melyseg = atlagdb = 0;

    rszoras (&gyoker);

    if (atlagdb - 1 > 0)
        szoras = std::sqrt (szorasosszeg / (atlagdb - 1));
    else
        szoras = std::sqrt (szorasosszeg);

    return szoras;
}

void
LZWBinFa::rmelyseg (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        if (melyseg > maxMelyseg)
            maxMelyseg = melyseg;
        rmelyseg (elem->egyesGyermek ());
        rmelyseg (elem->nullasGyermek ());
        --melyseg;
    }
}

void
LZWBinFa::ratlag (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        ratlag (elem->egyesGyermek ());
        ratlag (elem->nullasGyermek ());
        --melyseg;
        if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
        {
            ++atlagdb;
            atlagosszeg += melyseg;
        }
    }
}

void
LZWBinFa::rszoras (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        rszoras (elem->egyesGyermek ());
        rszoras (elem->nullasGyermek ());
        --melyseg;
        if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
        {
            ++atlagdb;
            szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
        }
    }
}


void
err_msg (void)
{
    std::cout << "Usage : ./z input.txt -o output.txt -i | -po | -pr (optional: -s for statistics)" << std::endl;
}

// --- Függvény hibakezelésre, majd a mainbe paraméterként az argc-t írjuk.
// --- argc az egy sima int változó, "int main (int argc,char *argv[])". A paraccsorba beírt paraméterek számát adja vissza. pl : "./z3a7 bemenet.txt -o kimenet.txt -i -s" ez 6 paraméter.
int
err_arg_num (int num)
{
	try {
    	if (num < 5 || num > 7) throw &num; // vagy írunk -s-t vagy nem szóval mint a 2 féle képpen működnie kell.
	
	}
	catch (int *num) {
		err_msg();
		if (*num > 6)
		std::cout<<"Error : Too much arguments ("<<*num<<")."<<std::endl;

		if (*num < 5)
		std::cout<<"Error : Not enough arguments ("<<*num<<")."<<std::endl;
		

		return -1;
	}
}

// --- Függvény a százalékhoz.(double betett lesz majd a nulla,egy.double ossz lesz majd ossznulla,osszegy)
double
stat(double betett,double ossz)
{
	return (betett/ossz)*100;
}

int
main (int argc, char *argv[])
{
    char *inFile = *++argv;
    //HIBAKEZELÉS ***************
    //HIBAKEZELÉS ***************
    //HIBAKEZELÉS ***************

    // megnezzuk megvan-e a 5, ha nincs akkor error uzenetben figyelmeztetjuk a usert. -r
    err_arg_num(argc);
	// -o megvan-e ?
	try {
    	if (*((*++argv) + 1) != 'o')
		    {
		        throw 'o';
		    }
	}
	catch(char o)
	{
		err_msg();
		std::cout<<"Error : 3. argument should be '-o'"<<std::endl;
		return -2;
	}
    //beolvasandó file
    std::fstream beFile (inFile, std::ios_base::in);
    //létezik-e a megadott bemeneti file?
    try {
	    if (!beFile)
	    {
	        throw &inFile; //ha nem akkor a bemeneti file nevének memoriacímét átadjuk a catch-nek. -r
	    }
	}
	catch(char** inFile)
	{
		err_msg();
		std::cout<<"Error : '"<<*inFile<<"' doesn't exist."<<std::endl; //'bemeneti_file'-nem létezik, error uzenet.
		return -3;
	}
	
	//HIBAKEZELÉS ***************
    //HIBAKEZELÉS ***************
    //HIBAKEZELÉS ***************

    std::fstream kiFile (*++argv, std::ios_base::out);

    unsigned char b;		// ide olvassik majd a bejövő fájl bájtjait
    LZWBinFa binFa;		// s nyomjuk majd be az LZW fa objektumunkba

    // --- IDE PRO TIP : ha ezt a kövi 3 sort nem kommenteljük ki 
    //,akkor a bemeneti fájlunk ne egy soros legyen, hanem minimum 2.
    while (beFile.read ((char *) &b, sizeof (unsigned char))) 
       if (b == 0x0a)										
           break;											

    bool kommentben = false;


    /* Itt van egy "b" karakterünk, amibe belekarjuk a vizsgált karaktert és a b-t vizsgáljuk.
    */
    while (beFile.read ((char *) &b, sizeof (unsigned char)))
    {

        if (b == 0x3e)
        {			// > karakter
            kommentben = true;
            continue;
        }

        if (b == 0x0a)
        {			// újsor
            kommentben = false;
            continue;
        }

        if (kommentben)
            continue;

        if (b == 0x4e)		// N betű
            continue;

        /*  --- Kérdés : Mit csinál ez a ciklus és benne a b <<= 1 ?
        	--- Válasz : Végig megy a vizsgált "b" karakter bitjein (8-biten)
        	és megnézi, hogy 1 vagy 0 és küldi őket a fába a << operátorral() ami fent 135. sor-ban van,
        	, hogy mit csinál). A b <<= 1; az annyit jelent, hogy egyesével lépeget a bitjein a bitshift
        	operátorral.
		*/
        for (int i = 0; i < 8; ++i)
        {
            // maszkolunk eddig..., most már simán írjuk az if fejébe a legmagasabb helyiértékű bit vizsgálatát
            // csupa 0 lesz benne a végén pedig a vizsgált 0 vagy 1, az if megmondja melyik:
            if (b & 0x80)
                // ha a vizsgált bit 1, akkor az '1' betűt nyomjuk az LZW fa objektumunkba
                binFa << '1';
            else
                // különben meg a '0' betűt:
                binFa << '0';
            b <<= 1;
        }

    }
    
   	
   	std::string a = argv[1];

   	/* --- Kérdés : Miért argv[1] lesz a "-i | -po | -pr"?
   	   --- Válasz : Mert már fentebb léptettük az argv-t és ezáltal az argv[0] lesz a kimeneti fájl, tehát argv[1] a "-i | -po | -pr".
   	*/

    /* --- Magyarázat
    *argv[] - két dimenziós karakter tömb(ugy kell elkepzelni, hogy egy olyan tömb ami karakter tömböket("stringeket") tárol), a terminálból program indításakor bekért argumentumokat tárolja.
    (elso dimenzio pl: argv[0] az adott argumentum egészét jelenti (magát a "stringet"), de pl. : az argv[0][0] a 0. bemeneti paraméter legelso karaktere).
    Mivel léptettük az argv-t így : "*++argv" kétszer is : 1. char *inFile = *++argv; 2.  std::fstream kiFile (*++argv, std::ios_base::out);
    ezért az argv[0] lesz jelen pillanatban a terminalbol bekert kimeneti fájl pl:(outfile.txt) neve azon belül argv[0][0] az elso karaktere.
    Nekünk ugye meg kell adnunk egy új kapcsolót, hogy melyik fabejárással akarjuk a fánkat bejárni, 
    ehez a következő parancssori argumentumot kell megvizsgálnunk, tehát az argv[1]-et. Ezt egy stringbe tároljuk (pont efelett) "string a" jelen esetben,
    mivel a C++ nem engedi közvetlenül, hogy *argv[] akármelyik elemét egy stringgel hasonlítsunk össze, tehát nem tudnánk rá pl: 'if == "-inorder"'-t
    írni.(ne felejtsük el itt a #include <string>-et). Ha ez érthetetlen akkor itt van példában, h mi ez az argv : 


		(
		 Példa : argv[0] = kimeneti_fajl_neve.txt
    	 argv[0][0] = k
    	 argv[0][1] = i
    	 argv[0][2] = m
    	 argv[0][3] = e
    	 argv[0][4] = n
    	 argv[0][5] = e
    	 argv[0][6] = t
    	 argv[0][7] = i
    	 ....
		 
		 Például :
    	 argv[1] = "-po" 
    	 argv[1][0] = -
    	 argv[1][1] = p
    	 argv[1][2] = o

    	 )
    
    */
 	
   	/* --- Paraszt módszer, de működik. 3 feltételt írunk a 3 fajta bejárásra,
   	 Attől függően, hogy mit ír be a user, ugy járjuk be a fát.
   	*/

   	if (a == "-i")
   	{
   		kiFile << "INORDER" << std::endl;
   		binFa.kiiri(kiFile);
   	}
   	else if (a == "-po")
   	{
   		kiFile << "POSTORDER" <<std::endl;
   		binFa.kiirpo(kiFile);
   	}
   	else if (a == "-pr")
   	{
   		kiFile << "PREORDER" <<std::endl;
   		binFa.kiirpr(kiFile);
   	}

   	// Megnézzük van-e -s kapcsoló a végén, ha igen akkor írjuk a statisztikát 0-ra meg 1-ekre valóan.
   	if (argc == 6)
   	{
   	std::string s = argv[2];

   		if (s == "-s")
   		{
   			kiFile <<"--- Nullák statisztikái ---"<<"\nVizsgált 0-k száma : " << binFa.getOsszNull() << "\nA fába bekerült 0-k száma : " <<binFa.getNull() << std::endl;
   			kiFile <<"A vizsgált nullák "<< stat(binFa.getNull(),binFa.getOsszNull()) << "%-a került be a fába"<< std::endl;

   			kiFile <<"--- Egyek statisztikái ---"<<"\nVizsgált 1-k száma : " << binFa.getOsszEgy() << "\nA fába bekerült 1-k száma : " <<binFa.getEgy() << std::endl;
   			kiFile <<"A vizsgált egyek "<< stat(binFa.getEgy(),binFa.getOsszEgy()) << "%-a került be a fába"<< std::endl;
    	}
	}

    kiFile << "depth = " << binFa.getMelyseg () << std::endl;   
    kiFile << "mean = " << binFa.getAtlag () << std::endl;
    kiFile << "var = " << binFa.getSzoras () << std::endl;

    kiFile.close ();
    beFile.close ();

    return 0;
}
